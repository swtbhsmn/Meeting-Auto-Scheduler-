datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN 
  USER 
}

model User {
  id          Int       @id @default(autoincrement())
  firstName   String    
  lastName    String    
  email       String    @unique 
  password    String    
  role        Role      @default(USER)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([email])
}

model Investor {
  id          Int                  @id @default(autoincrement())
  name        String              
  company     String               
  timezone    String               
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  availability AvailabilitySlot[]  // Investor-specific availability slots
  selections  Selection[]          // Meetings with portfolio companies
}

model PortfolioCompany {
  id          Int                  @id @default(autoincrement())
  name        String             
  company     String               
  timezone    String               // e.g., "America/New_York"
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  availability AvailabilitySlot[]  // Portfolio-specific availability slots
  selections  Selection[]          // Meetings with investors
}

model Selection {
  id          Int          @id @default(autoincrement())
  investorId  Int?         // Reference to Investor
  portfolioId Int?         // Reference to Portfolio Company
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  investor    Investor?    @relation(fields: [investorId], references: [id])
  portfolio   PortfolioCompany? @relation(fields: [portfolioId], references: [id])
  meetings    Meeting[]    // Scheduled meetings
}

model Meeting {
  id          Int       @id @default(autoincrement())
  selectionId Int       // Reference to Selection
  date        DateTime  // Scheduled date in IST
  startTime   DateTime  // Start time in IST
  endTime     DateTime  // End time in IST
  duration    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  selection   Selection @relation(fields: [selectionId], references: [id])
  events      Event[]   @relation("EventMeetings") // Relation with events
}

model AvailabilitySlot {
  id          Int                @id @default(autoincrement())
  investorId  Int?               // Relation to Investor
  portfolioId Int?               // Relation to Portfolio Company
  timezone    String             // Timezone of the user
  date        DateTime?          @db.Date// Date of availability
  startTime   DateTime?          @db.Time// Start time of availability
  endTime     DateTime?          @db.Time// End time of availability
  investor    Investor?          @relation(fields: [investorId], references: [id])
  portfolio   PortfolioCompany?  @relation(fields: [portfolioId], references: [id])
}

model Event {
  id          Int       @id @default(autoincrement())
  name        String    @unique // Unique event name
  startDate   DateTime  @default(dbgenerated("'2025-02-01T00:00:00+05:30'")) // Fixed start date in IST
  endDate     DateTime  @default(dbgenerated("'2025-02-05T23:59:59+05:30'")) // Fixed end date in IST
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  meetings    Meeting[] @relation("EventMeetings") // Relation with meetings
}